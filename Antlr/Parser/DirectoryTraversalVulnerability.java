public class DirectoryTraversalVulnerabilityExample {  
  
    public static void main(String[] args, String location1,String location2, String location3, String location4, String location5) {

    //PATH CLASS TESTING

    //Test Case 1 : Proper

    Path path1 = Paths.get("c:\\data\\myfile.txt");
    path5.normalize().ToString();

    //Test Case 2 : Proper

    boolean pathcheck2 = SomeFilter.Check(location1);
    Path path2 = Paths.get(location1);

    //Test Case 3 : Proper

    boolean pathcheck3 = SomeFilter.Check(location1);
    Path path3 = Paths.get("c:\\data\\myfile.txt"+location1);

    //Test Case 4 : Proper

    boolean pathcheck4 = SomeFilter.Check(location1);
    Path path4 = Paths.get(location2+location1); //Base directory + File Location Case

    //Test Case 5 : Proper

    Path path5 = Paths.get(location2);

    String path = path5.normalize();

     //Test Case 6 : Proper

    Path path6 = Paths.get(location2);

    if(path6.isAbsolute()){
    }


    //Test Case 7 : Vulnerable

    Path path7 = Paths.get(location5); //location5 is not validated above anywhere in the method block.

    //Test Case 8 : Vulnerable

    Path path7 = Paths.get("c:\\data\\myfile.txt"+location5); //location5 is not validated above anywhere in the method block.

    //Test case 9 : Vulnerable

    Path path8 = Paths.get(location1+location2); //Vulnerable because location2 is not checked anywhere in this methodbody above. Here considering location1 as base directory and location2 as file location.







    // FILE CLASS TESTING

    //Test Case 1 : Proper

    File file1 = new File("c:\\data\\myfile.txt");   //Complete hard coded path is Not Vulnerable !

    //Test Case 2 : Proper

    boolean check2 = SomeFilter.Check(location1);
    File file2 = new File("c:\\data\\myfile.txt"+location1);    //location1 is already checked above, so considering it as fine

    //Test Case 3 : Proper

    boolean check3 = SomeFilter.Check(location2);
    File file3 = new File(location1+location2);

    //Test Case 4 : Vulnerable

    File file4 = new File("c:\\data\\myfile.txt"+location3);  //Vulnerable because location3 is not checked anywhere in this methodbody above.

    //Test Case 5 : Vulnerable

    File file5 = new File(location3);  //Vulnerable because location3 is not checked anywhere in this methodbody above.

    //Test Case 6 : Vulnerable

    File file6 = new File(location3+location4);  //Vulnerable because location4 is not checked anywhere in this methodbody above. Here considering location3 as base directory and location4 as file location.

    //Test Case 7 : Proper

    File file7 = new File(location3); //Proper because isAbsolute() function is used with file7.
    if(file7.isAbsolute()){    
    }

    //Test Case 8 : Proper 

    File file8 = new File(location3); //Proper because getCanonicalPath() function is used with file8.
    String str1 = file8.getCanonicalPath();

    //Test Case 9 : Proper 

    File file9 = new File(location3); //Proper because getAbsolutePath() function is used with file8.
    String str2 = file9.getAbsolutePath();
                                    
    }
}
